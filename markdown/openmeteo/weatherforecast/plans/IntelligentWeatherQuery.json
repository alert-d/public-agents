{
    "description": "Intelligent weather query system that parses user intent and provides targeted weather information",
    "type": "plan",
    "version": "v0.0.6",
    "agent": "openmeteo/weatherforecast",
    "serial": [
        {
            "name": "parseIntent",
            "type": "llm",
            "description": "Parse the user's weather query to extract city, weather variable, and time period",
            "model": "gpt-4",
            "stream": false,
            "query": "Parse this weather query: '${$userQuery}'. Return a JSON object with: city (string), variable (temperature/rain/wind/humidity/precipitation), days (number), and focus (current/forecast/daily). Example: 'Paris rain for 3 days' should return {'city': 'Paris', 'variable': 'precipitation', 'days': 3, 'focus': 'forecast'}. If no specific days mentioned, default to 7. If no specific variable mentioned, default to 'temperature'."
        },
        {
            "description": "Geocode the parsed city name to get coordinates",
            "type": "fetch",
            "method": "GET",
            "url": "https://geocoding-api.open-meteo.com/v1/search",
            "params": {
                "name": "${$parseIntent.city}",
                "count": "1",
                "language": "en",
                "format": "json"
            },
            "stream": true,
            "name": "geocodingResults"
        },
        {
            "description": "Get weather forecast using the coordinates and parsed parameters",
            "type": "fetch",
            "method": "GET",
            "url": "https://api.open-meteo.com/v1/forecast",
            "params": {
                "latitude": "${$geocodingResults.results[0].latitude}",
                "longitude": "${$geocodingResults.results[0].longitude}",
                "select": [
                    "current.temperature_2m",
                    "current.relative_humidity_2m",
                    "current.apparent_temperature",
                    "current.precipitation",
                    "current.weather_code",
                    "current.wind_speed_10m",
                    "hourly.temperature_2m",
                    "hourly.precipitation",
                    "hourly.weather_code",
                    "hourly.wind_speed_10m",
                    "hourly.relative_humidity_2m",
                    "daily.temperature_2m_max",
                    "daily.temperature_2m_min",
                    "daily.precipitation_sum",
                    "daily.weather_code"
                ],
                "current": "temperature_2m,relative_humidity_2m,apparent_temperature,precipitation,weather_code,wind_speed_10m",
                "hourly": "temperature_2m,precipitation,weather_code,wind_speed_10m,relative_humidity_2m",
                "daily": "temperature_2m_max,temperature_2m_min,precipitation_sum,weather_code",
                "forecast_days": "${$parseIntent.days}",
                "timezone": "${$geocodingResults.results[0].timezone}"
            },
            "stream": true,
            "name": "weatherData"
        },
        {
            "description": "Display daily max temperatures in table format",
            "type": "table",
            "title": "Daily Max Temperatures",
            "stream": false,
            "name": "weatherTable",
            "input": "${$zip($weatherData.daily.time, $weatherData.daily.temperature_2m_max, $weatherData.daily.temperature_2m_min, $weatherData.daily.precipitation_sum, $weatherData.daily.weather_code) ~> $map(function($row) { {\"Date\": $row[0], \"Max Temp (°C)\": $row[1], \"Min Temp (°C)\": $row[2], \"Precipitation (mm)\": $row[3], \"Weather Code\": $row[4]} })}"
        },
        {
            "description": "Provide intelligent weather analysis based on the user's specific query",
            "type": "llm",
            "model": "gpt-4",
            "stream": true,
            "input": "${$weatherTable}",
            "query": "Analyze the weather data for ${$parseIntent.city} based on the user's query: '${$userQuery}'. Focus on ${$parseIntent.variable} for the next ${$parseIntent.days} days. Provide specific insights about the requested weather variable, practical recommendations, and format the relevant data in a readable way. If the user asked about rain/precipitation, focus on precipitation patterns. If they asked about temperature, focus on temperature trends. If they asked about wind, focus on wind conditions."
        }
    ]
}
