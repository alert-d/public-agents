{
  "description": "Intelligent weather query system that parses user intent and provides targeted weather information",
  "type": "plan",
  "version": "v0.0.6",
  "agent": "openmeteo/weatherforecast",
  "serial": [
    {
      "name": "parseIntent",
      "type": "llm",
      "description": "Parse the user's weather query to extract city, weather variable, and time period",
      "model": "gpt-4",
      "stream": false,
      "query": "Parse this weather query: '${$userQuery}'. Return a JSON object with: city (string), variable (temperature/rain/wind/humidity/precipitation), days (number), and focus (current/forecast/daily). Example: 'Paris rain for 3 days' should return {'city': 'Paris', 'variable': 'precipitation', 'days': 3, 'focus': 'forecast'}. If no specific days mentioned, default to 7. If no specific variable mentioned, default to 'temperature'.",
      "testOutput": [
        "${ function($OUTPUT) { $test($OUTPUT.city, 'city field exists in parsed intent') } }",
        "${ function($OUTPUT) { $test($OUTPUT.variable, 'variable field exists in parsed intent') } }",
        "${ function($OUTPUT) { $test($OUTPUT.days, 'days field exists in parsed intent') } }",
        "${ function($OUTPUT) { $test($OUTPUT.focus, 'focus field exists in parsed intent') } }"
      ]
    },
    {
      "description": "Geocode the parsed city name to get coordinates",
      "type": "fetch",
      "method": "GET",
      "url": "https://geocoding-api.open-meteo.com/v1/search",
      "params": {
        "name": "${$parseIntent.city}",
        "count": "1",
        "language": "en",
        "format": "json"
      },
      "stream": true,
      "name": "geocodingResults",
      "testInput": [
        "${ function() { $test($parseIntent.city, 'city from parsed intent available') } }"
      ],
      "testOutput": [
        "${ function($OUTPUT) { $test($OUTPUT.results, 'geocoding results exist') } }",
        "${ function($OUTPUT) { $test($OUTPUT.results[0].latitude, 'latitude exists in geocoding results') } }",
        "${ function($OUTPUT) { $test($OUTPUT.results[0].longitude, 'longitude exists in geocoding results') } }",
        "${ function($OUTPUT) { $test($OUTPUT.results[0].timezone, 'timezone exists in geocoding results') } }"
      ]
    },
    {
      "description": "Get weather forecast using the coordinates and parsed parameters",
      "type": "fetch",
      "method": "GET",
      "url": "https://api.open-meteo.com/v1/forecast",
      "params": {
        "latitude": "${$geocodingResults.results[0].latitude}",
        "longitude": "${$geocodingResults.results[0].longitude}",
        "select": [
          "current.temperature_2m",
          "current.relative_humidity_2m",
          "current.apparent_temperature",
          "current.precipitation",
          "current.weather_code",
          "current.wind_speed_10m",
          "hourly.temperature_2m",
          "hourly.precipitation",
          "hourly.weather_code",
          "hourly.wind_speed_10m",
          "hourly.relative_humidity_2m",
          "daily.temperature_2m_max",
          "daily.temperature_2m_min",
          "daily.precipitation_sum",
          "daily.weather_code"
        ],
        "current": "temperature_2m,relative_humidity_2m,apparent_temperature,precipitation,weather_code,wind_speed_10m",
        "hourly": "temperature_2m,precipitation,weather_code,wind_speed_10m,relative_humidity_2m",
        "daily": "temperature_2m_max,temperature_2m_min,precipitation_sum,weather_code",
        "forecast_days": "${$parseIntent.days}",
        "timezone": "${$geocodingResults.results[0].timezone}"
      },
      "stream": true,
      "name": "weatherData",
      "testInput": [
        "${ function() { $test($geocodingResults.results[0].latitude, 'latitude from geocoding available') } }",
        "${ function() { $test($geocodingResults.results[0].longitude, 'longitude from geocoding available') } }",
        "${ function() { $test($parseIntent.days, 'days from parsed intent available') } }",
        "${ function() { $test($geocodingResults.results[0].timezone, 'timezone from geocoding available') } }"
      ],
      "testOutput": [
        "${ function($OUTPUT) { $test($OUTPUT.daily, 'daily weather data exists') } }",
        "${ function($OUTPUT) { $test($OUTPUT.daily.time, 'daily time data exists') } }",
        "${ function($OUTPUT) { $test($OUTPUT.daily.temperature_2m_max, 'daily max temperature data exists') } }",
        "${ function($OUTPUT) { $test($OUTPUT.daily.temperature_2m_min, 'daily min temperature data exists') } }",
        "${ function($OUTPUT) { $test($OUTPUT.daily.precipitation_sum, 'daily precipitation data exists') } }",
        "${ function($OUTPUT) { $test($OUTPUT.daily.weather_code, 'daily weather code data exists') } }"
      ]
    },
    {
      "description": "Display daily max temperatures in table format",
      "type": "table",
      "title": "Daily Max Temperatures",
      "stream": false,
      "name": "weatherTable",
      "input": "${$zip($weatherData.daily.time, $weatherData.daily.temperature_2m_max, $weatherData.daily.temperature_2m_min, $weatherData.daily.precipitation_sum, $weatherData.daily.weather_code) ~> $map(function($row) { {\"Date\": $row[0], \"Max Temp (°C)\": $row[1], \"Min Temp (°C)\": $row[2], \"Precipitation (mm)\": $row[3], \"Weather Code\": $row[4]} })}",
      "testInput": [
        "${ function() { $test($weatherData.daily.time, 'daily time data available for table') } }",
        "${ function() { $test($weatherData.daily.temperature_2m_max, 'daily max temperature data available for table') } }",
        "${ function() { $test($weatherData.daily.temperature_2m_min, 'daily min temperature data available for table') } }",
        "${ function() { $test($weatherData.daily.precipitation_sum, 'daily precipitation data available for table') } }",
        "${ function() { $test($weatherData.daily.weather_code, 'daily weather code data available for table') } }"
      ],
      "testOutput": [
        "${ function($OUTPUT) { $test($type($OUTPUT) = 'array', 'table output is array') } }",
        "${ function($OUTPUT) { $test($OUTPUT[0].Date, 'Date field exists in table output') } }",
        "${ function($OUTPUT) { $test($OUTPUT[0]['Max Temp (°C)'], 'Max Temp field exists in table output') } }",
        "${ function($OUTPUT) { $test($OUTPUT[0]['Min Temp (°C)'], 'Min Temp field exists in table output') } }",
        "${ function($OUTPUT) { $test($OUTPUT[0]['Precipitation (mm)'], 'Precipitation field exists in table output') } }",
        "${ function($OUTPUT) { $test($OUTPUT[0]['Weather Code'], 'Weather Code field exists in table output') } }"
      ]
    },
    {
      "description": "Provide intelligent weather analysis based on the user's specific query",
      "type": "llm",
      "model": "gpt-4",
      "stream": true,
      "input": "${$weatherTable}",
      "query": "Analyze the weather data for ${$parseIntent.city} based on the user's query: '${$userQuery}'. Focus on ${$parseIntent.variable} for the next ${$parseIntent.days} days. Provide specific insights about the requested weather variable, practical recommendations, and format the relevant data in a readable way. If the user asked about rain/precipitation, focus on precipitation patterns. If they asked about temperature, focus on temperature trends. If they asked about wind, focus on wind conditions.",
      "testInput": [
        "${ function() { $test($weatherTable~>$type() ='array', 'input to llm is an array') } }",
        "${ function() { $test($weatherTable[0].Date, 'Date field exists in llm input') } }",
        "${ function() { $test($weatherTable[0]['Max Temp (°C)'], 'Max Temp field exists in llm input') } }",
        "${ function() { $test($weatherTable[0]['Min Temp (°C)'], 'Min Temp field exists in llm input') } }",
        "${ function() { $test($parseIntent.city, 'city from parsed intent available for query') } }",
        "${ function() { $test($parseIntent.variable, 'variable from parsed intent available for query') } }",
        "${ function() { $test($parseIntent.days, 'days from parsed intent available for query') } }"
      ]
    }
  ]
}
