name: Agent Sync Workflow

on:
  push:
    branches: [main]
    paths:
      - "meta.yaml"
      - ".github/workflows/agent-sync.yml"
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  sync-agents:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    steps:
      - name: Parse repo config
        run: |
          echo "TARGET_REPO=$(echo '${{ secrets.REPO_CONFIG }}' | jq -r '.target_repo')" >> $GITHUB_ENV
          echo "SOURCE_REPO_URL=$(echo '${{ secrets.REPO_CONFIG }}' | jq -r '.source_repo_url')" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DOC_SYNC }}

      - name: Process meta.yaml if present
        run: |
          if [ -f "meta.yaml" ]; then
            echo "Found meta.yaml in root, processing..."
            
            # Validate meta.yaml format and extract fields safely
            if ! command -v yq &> /dev/null; then
              echo "Installing yq for YAML parsing..."
              wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
              chmod +x /usr/local/bin/yq
            fi
            
            # Extract agent type and repo URL using yq for safer parsing
            agent_type=$(yq eval '.type' "meta.yaml" 2>/dev/null | tr -d '"')
            repo_url=$(yq eval '.scm' "meta.yaml" 2>/dev/null | tr -d '"')
            
            # Validate inputs
            if [ -z "$agent_type" ] || [ -z "$repo_url" ]; then
              echo "Error: Missing required fields 'type' or 'scm' in meta.yaml"
              exit 1
            fi
            
            # Sanitize agent_type (only allow alphanumeric, hyphens, underscores)
            if [[ ! "$agent_type" =~ ^[a-zA-Z0-9_-]+$ ]]; then
              echo "Error: Invalid agent_type '$agent_type'. Only alphanumeric, hyphens, and underscores allowed."
              exit 1
            fi
            
            # Additional sanitization - prevent path traversal
            if [[ "$agent_type" =~ \.\. ]] || [[ "$agent_type" =~ ^/ ]] || [[ "$agent_type" =~ /$ ]]; then
              echo "Error: Invalid agent_type '$agent_type'. Cannot contain path traversal characters."
              exit 1
            fi
            
            # Limit agent_type length to prevent abuse
            if [ ${#agent_type} -gt 50 ]; then
              echo "Error: Agent type too long (${#agent_type} chars). Maximum allowed: 50 characters."
              exit 1
            fi
            
            # Convert SSH URLs to HTTPS for better compatibility
            if [[ "$repo_url" == git@* ]]; then
              repo_url=$(echo "$repo_url" | sed 's|git@|https://|' | sed 's|:|/|')
              echo "Converted SSH URL to HTTPS: $repo_url"
            fi
            
            echo "Found agent type: $agent_type"
            echo "Found repo URL: $repo_url"
            
            # Create temp directory with timestamp to avoid conflicts
            temp_dir=".temp-repo-$(date +%s)-$$"
            
            # Clone the remote repo with timeout and error handling
            echo "Cloning remote repo..."
            if timeout 300 git clone --depth 1 --single-branch "$repo_url" "$temp_dir"; then
              echo "Successfully cloned repo"
            else
              echo "Error: Failed to clone repo or timeout exceeded"
              rm -rf "$temp_dir" 2>/dev/null || true
              exit 1
            fi
            
            # Verify the cloned repo is not too large (prevent abuse)
            repo_size=$(du -sm "$temp_dir" | cut -f1)
            max_size=${MAX_REPO_SIZE_MB:-100}
            if [ "$repo_size" -gt "$max_size" ]; then
              echo "Error: Repository too large ($repo_size MB). Maximum allowed: ${max_size}MB"
              rm -rf "$temp_dir"
              exit 1
            fi
            
            # Copy the agent folder from remote to local markdown
            if [ -d "$temp_dir/$agent_type" ]; then
              echo "Copying $agent_type/* to markdown/$agent_type/"
              mkdir -p "markdown/$agent_type"
              
              # Copy files with error handling
              if cp -r "$temp_dir/$agent_type"/* "markdown/$agent_type/"; then
                echo "Successfully copied agent files"
                
                # Validate agent.yaml has required fields
                if [ -f "markdown/$agent_type/agent.yaml" ]; then
                  echo "Validating agent.yaml structure..."
                  
                  # Extract required fields
                  agent_type_from_yaml=$(yq eval '.type' "markdown/$agent_type/agent.yaml" 2>/dev/null | tr -d '"')
                  examples_field=$(yq eval '.examples' "markdown/$agent_type/agent.yaml" 2>/dev/null)
                  scm_field=$(yq eval '.scm' "markdown/$agent_type/agent.yaml" 2>/dev/null | tr -d '"')
                  
                  # Validate type field
                  if [ -z "$agent_type_from_yaml" ] || [ "$agent_type_from_yaml" = "null" ]; then
                    echo "Error: Missing or invalid 'type' field in agent.yaml"
                    rm -rf "markdown/$agent_type"
                    rm -rf "$temp_dir"
                    exit 1
                  fi
                  
                  # Validate examples field exists
                  if [ -z "$examples_field" ] || [ "$examples_field" = "null" ]; then
                    echo "Error: Missing 'examples' field in agent.yaml"
                    rm -rf "markdown/$agent_type"
                    rm -rf "$temp_dir"
                    exit 1
                  fi
                  
                  # Validate scm field
                  if [ -z "$scm_field" ] || [ "$scm_field" = "null" ]; then
                    echo "Error: Missing or invalid 'scm' field in agent.yaml"
                    rm -rf "markdown/$agent_type"
                    rm -rf "$temp_dir"
                    exit 1
                  fi
                  
                  # Validate scm field format (should be a repo URL)
                  if [[ ! "$scm_field" =~ ^(https://|git@)[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+(\.git)?$ ]]; then
                    echo "Error: Invalid 'scm' field format in agent.yaml: $scm_field"
                    rm -rf "markdown/$agent_type"
                    rm -rf "$temp_dir"
                    exit 1
                  fi
                  
                  echo "âœ… Agent validation passed:"
                  echo "  - Type: $agent_type_from_yaml"
                  echo "  - Examples: present"
                  echo "  - SCM: $scm_field"
                else
                  echo "Error: agent.yaml not found in $agent_type directory"
                  rm -rf "markdown/$agent_type"
                  rm -rf "$temp_dir"
                  exit 1
                fi
                
                # Verify no sensitive files were copied
                sensitive_files=$(find "markdown/$agent_type" -name "*.key" -o -name "*.pem" -o -name ".env*" -o -name "secrets.*" -o -name "*.token" -o -name "*.secret" 2>/dev/null | wc -l)
                if [ "$sensitive_files" -gt 0 ]; then
                  echo "Warning: Found $sensitive_files potential sensitive files in copied agent"
                  # Don't fail, but log the warning
                fi
              else
                echo "Error: Failed to copy agent files"
                rm -rf "$temp_dir"
                exit 1
              fi
            else
              echo "Error: $agent_type directory not found in remote repo"
              rm -rf "$temp_dir"
              exit 1
            fi
            
            # Clean up temp repo
            rm -rf "$temp_dir"
            echo "Cleaned up temp repo"
            
            # Remove meta.yaml from root (cleanup)
            rm "meta.yaml"
            echo "Removed meta.yaml from root"
          else
            echo "No meta.yaml found in root, skipping agent sync"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.DOC_SYNC }}
          MAX_REPO_SIZE_MB: ${{ secrets.MAX_REPO_SIZE_MB || '100' }}

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .

          # Only commit and push if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Auto-sync agents from source repos"
            git push
            
            # Only trigger sync-docs if we actually committed changes
            echo "Triggering sync-docs workflow..."
            response=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: Bearer ${{ secrets.DOC_SYNC }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/dispatches \
              -d '{"event_type":"sync-docs","client_payload":{"repo_url":"git@github.com:${{ github.repository }}.git"}}')

            http_code=$(echo "$response" | tail -n1)
            response_body=$(echo "$response" | head -n -1)

            if [ "$http_code" = "204" ]; then
              echo "Dispatch event sent successfully to sync-docs"
            else
              echo "Failed to send dispatch event. Status: $http_code"
              echo "Response: $response_body"
              exit 1
            fi
          else
            echo "No changes to commit, skipping sync-docs trigger"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.DOC_SYNC }}
